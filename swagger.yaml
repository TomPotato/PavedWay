openapi: 3.0.4

info:
  title: Paved Way API
  description: API per la gestione degli eventi sulla mobilità della città di Trento.
  version: 1.0.0

servers:
  - url: TODO

paths:
  /auth:
    /register:
      post:
        summary: Registrazione di un nuovo utente cittadino
        description: >-
          Permette la registrazione di un nuovo utente come cittadino. 
          L'utente deve fornire nome utente, nome, cognome, email e password.
          Se la registrazione ha successo, l'utente cittadino viene creato e
          il server restituisce un token JWT per l'autenticazione.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Citizen"
        responses:
          "201":
            description: Registrazione riuscita.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: Token JWT per l'autenticazione.
          "400":
            description: Richiesta non valida.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: Nome utente o email già in uso.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "500":
            description: Errore interno del server.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"

    /login:
      post:
        summary: Autenticazione dell'utente
        description: Restituisce un token JWT se le credenziali sono valide.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - username
                  - password
                properties:
                  username:
                    type: string
                    description: Nome utente.
                  password:
                    type: string
                    description: Password.
        responses:
          "200":
            description: Autenticazione riuscita.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: Token JWT per l'autenticazione.
          "400":
            description: Richiesta non valida.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: Credenziali non valide.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "500":
            description: Errore interno del server.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"

  /reports:
    get:
      summary: Restituisce la lista delle segnalazioni
      description: Restituisce la lista delle segnalazioni.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Numero di segnalazioni da saltare prima di restituire i risultati.
        - in: query
          name: limit
          schema:
            type: integer
          description: Numero massimo di segnalazioni da restituire.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sites:
    get:
      summary: Restituisce la lista dei cantieri esistenti
      description: Restituisce la lista dei cantieri esistenti.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Numero di cantieri da saltare prima di restituire i risultati.
        - in: query
          name: limit
          schema:
            type: integer
          description: Numero massimo di cantieri da restituire.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Site"
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Crea un nuovo cantiere
      description: Crea un nuovo cantiere. Per creare un cantiere è necessario essere autenticati come amministratore.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Site"
      responses:
        "201":
          description: Cantiere creato con successo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        "400":
          description: Richiesta non valida.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato. Devi fornire una chiave API valida.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Accesso negato. Devi essere un amministratore per creare un cantiere.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sites/{id}:
    delete:
      summary: Elimina un cantiere in base all'ID
      description: >-
        Elimina un cantiere esistente in base all'ID fornito.
        Per eliminare un cantiere è necessario essere autenticati come amministratore.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del cantiere da eliminare
      responses:
        "200":
          description: Cantiere eliminato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Messaggio di conferma dell'eliminazione.
        "400":  
          description: Richiesta non valida.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":  
          description: Non autorizzato. Devi fornire una chiave API valida.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":  
          description: Accesso negato. Devi essere un amministratore per eliminare un cantiere.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":  
          description: Eliminazione fallita. Nessun cantiere trovato con l'ID fornito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":  
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reports/{id}:
    get:
      summary: Restituisce una segnalazione specifica.
      description: Restituisce una segnalazione specifica in base all'ID fornito.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID della segnalazione da restituire.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "404":
          description: Segnalazione non trovata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: >-
        Chiave API per l'autenticazione.
        Deve essere fornita nell'intestazione della richiesta.
        Deve essere un token JWT valido.

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Messaggio di errore.
        code:
          type: integer
          description: Codice di errore.
        message:
          type: string
          description: Messaggio di errore dettagliato.

    User:
      type: object
      required:
        - username
        - name
        - surname
        - password
      properties:
        id:
          type: integer
          description: ID dell'utente (generato automaticamente dal server).
        username:
          type: string
          description: Nome utente.
        name:
          type: string
          description: Nome dell'utente.
        surname:
          type: string
          description: Cognome dell'utente.
        password:
          type: string
          description: Password dell'utente.
        role:
          type: string
          enum:
            - citizen
            - admin
          description: Ruolo dell'utente (cittadino o amministratore, assegnato automaticamente alla registrazione).

    Citizen:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - email
          properties:
            required:
            email:
              type: string
              format: email
              description: Indirizzo email del cittadino.

    Admin:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            required:
              - office
            office:
              type: string
              description: ufficio di competenza dell'amministratore.

    Location:
      type: object
      required:
        - latitude
        - longitude
        - street
        - number
        - city
        - code
      properties:
        latitude:
          type: number
          format: float
          description: Latitudine della posizione.
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: float
          description: Longitudine della posizione.
          minimum: -180
          maximum: 180
        street:
          type: string
          description: Nome della strada.
        number:
          type: string
          description: Numero civico.
        city:
          type: string
          description: Nome della città.
        code:
          type: string
          description: Codice di Avviamento Postale.
          minLength: 5
          maxLength: 5

    Duration:
      type: object
      required:
        - start
      properties:
        start:
          type: string
          format: date-time
          description: Data e ora di inizio dell'evento.
        end:
          type: string
          format: date-time
          description: Data e ora di fine dell'evento.

    Comment:
      type: object
      required:
        - userId
        - text
      properties:
        id:
          type: integer
          description: ID del commento (generato automaticamente dal server).
        userId:
          type: integer
          description: ID dell'utente che ha scritto il commento.
        text:
          type: string
          description: Testo del commento.
        createdAt:
          type: string
          format: date-time
          description: Data e ora di creazione del commento.

    Event:
      type: object
      required:
        - name
        - info
        - location
        - duration
      properties:
        id:
          type: integer
          description: ID dell'evento (generato automaticamente dal server).
        name:
          type: string
          description: Nome dell'evento.
        info:
          type: string
          description: Descrizione dell'evento.
        location:
          $ref: "#/components/schemas/Location"
          description: Posizione dell'evento.
        duration:
          $ref: "#/components/schemas/Duration"
          description: Durata dell'evento.
        createdAt:
          type: string
          format: date-time
          description: Data e ora di creazione dell'evento (ora attuale se non specificata).
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          description: Lista dei commenti associati all'evento.
        discriminator:
          propertyName: eventType

    Report:
      allof:
        - $ref: "#/components/schemas/Event"
        - type: object
          properties:
            createdBy:
              type: integer
              description: ID dell'utente che ha creato la segnalazione.
            photos:
              type: array
              items:
                type: string
                format: binary
              description: Lista delle foto associate alla segnalazione.
            rating:
              type: integer
              description: Punteggio della segnalazione (impostato a 0 per una nuova segnalazione).
            status:
              type: string
              enum:
                - pending
                - approved
                - rejected
              description: Stato della segnalazione.

    Site:
      allof:
        - $ref: "#/components/schemas/Event"
        - type: object
          required:
            - companyName
          properties:
            companyName:
              type: string
              description: Nome dell'impresa edile che sta lavorando sul cantiere.
            realDuration:
              type: Duration
              description: Durata reale del cantiere, puó divergere da quella inserita alla creazione del cantiere.
